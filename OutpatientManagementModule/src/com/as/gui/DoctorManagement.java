package com.as.gui;

import com.as.bl.DoctorsHandler;
import com.as.main.BaseForm;
import com.as.model.Doctor;
import com.as.model.Patient;

import javax.print.Doc;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class DoctorManagement extends BaseForm {
    private JComboBox cbDoctors;
    private JTable table;
    private JPanel contentPane;


    private static final DoctorsHandler DH = new DoctorsHandler();

    private List<Doctor> doctors;
    private List<Patient> patients;

    private Patient selectedPatient;


    public DoctorManagement() throws HeadlessException {
        super("Doctor management", 800, 600);

        setContentPane(contentPane);

        doctors = DH.getDoctors();

        //Popunjavamo ComboBox s Doctor objektima iz baze
        //konstruktor očekuje Doctor[] tak da moramo List pretvoriti
        //u [], a s obzirom da Genericsi nestanu nakon compiliranja, moramo
        //mu reći s kojim tipom radi tak da mu proslijedimo prazno polje tipa Doctor
        cbDoctors.setModel(new DefaultComboBoxModel<>(doctors.toArray(new Doctor[0])));
        doctorChanged();

        cbDoctors.addActionListener(e -> doctorChanged());

        table.getSelectionModel().addListSelectionListener(event -> {
            if (table.getSelectedRow() >= 0)
                selectedPatient = patients.get(table.getSelectedRow());

        });

    }

    private void doctorChanged() {

        Doctor d = doctors.get(cbDoctors.getSelectedIndex());
        patients = DH.getPatientsForDoctor(d.getId());

        table.setModel(new PatientTableModel(patients));

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        cbDoctors = new JComboBox();
        contentPane.add(cbDoctors, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHEAST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        contentPane.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 3, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        table = new JTable();
        scrollPane1.setViewportView(table);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
